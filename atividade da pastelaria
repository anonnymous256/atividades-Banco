create database pastelaria;
use pastelaria;

create table cliente(
cli_id int primary key auto_increment,
cli_nome varchar(50),
cli_apelido varchar(50),
cli_cpf varchar(50) unique,
cli_nascimento date,
cli_telefone varchar(50),
cli_e_mail varchar(50),
cli_bairro varchar(50),
cli_estado varchar(50),
cli_cidade varchar(50)
);


create table produto(
pro_id int primary key auto_increment,
pro_nome varchar(50),
pro_tipo char,
pro_fk_recheio int,
pro_fk_tamanho int,
pro_fk_categoria int,
pro_preco float(10,2),-- fazer um trigger para adicionar o valor baseado no tamanho e no recheio
foreign key (pro_fk_recheio) references recheio (reche_id),
foreign key (pro_fk_tamanho) references tamanho (tam_id),
foreign key (pro_fk_categoria) references categoria (cat_id)
);

create table recheio(
reche_id int primary key auto_increment,
reche_tipo varchar(50),
reche_preco float(10,2)
);

create table categoria(
cat_id int primary key auto_increment,
cat_tipo varchar(50)
);

create table tamanho(
tam_id int primary key auto_increment,
tam_tipo char,
tam_preco varchar(50)
);

create table vendas(
ven_id int primary key auto_increment,
ven_data date,
ven_fk_cliente int,
ven_total float(10,5),
ven_fk_forma_pagamento int,
foreign key (ven_fk_cliente) references cliente (cli_id),
foreign key (ven_fk_forma_pagamento) references forma_pagamento (forpag_id)
);

create table itens_vendas(
itven_id int primary key auto_increment,
itenven_fk_venda int,
itenven_fk_produto int,
itenven_quatidade int,
itenven_unitario float(10,2),
itenven_valor float(10,5),
foreign key (itenven_fk_venda) references vendas(ven_id),
foreign key (itenven_fk_produto) references produto(pro_id)
);


create table forma_pagamento(
forpag_id int primary key auto_increment,
forpag_nome varchar(50)
);

create table recebimento(
rec_id int primary key auto_increment,
rec_fk_vendas int,
rec_valor float (10,2),
rec_fk_forma_pagamento int,
rec_data date,
foreign key (rec_fk_vendas) references vendas (ven_id),
foreign key (rec_fk_forma_pagamento) references forma_pagamento (forpag_id)
);


-- ================= INSERTS =================

-- Inserindo dados na tabela cliente
INSERT INTO cliente (cli_nome, cli_apelido, cli_cpf, cli_nascimento, cli_telefone, cli_e_mail, cli_bairro, cli_estado, cli_cidade) 
VALUES 
('Alisson', 'Al', '123.456.789-01', '1990-05-15', '(75) 1234-5678', 'Alisson.silva@example.com', 'Centro', 'Gabriela', 'FEIRA-DE-SANTANA'),
('Aislan', 'cabeça', '987.654.321-09', '1985-08-20', '(75) 9876-5432', 'Aislan.santos@example.com', 'Feira-9', 'BA', 'FEIRA-DE-SANTANA'),
('Virna', 'Vi', '456.789.123-45', '1978-03-10', '(75) 4567-8901', 'Virna.oliveira@example.com', 'Matinha', 'BA', 'FEIRA-DE-SANTANA'),
('Ana', 'Ninha', '321.654.987-90', '1995-12-25', '(75) 3210-9876', 'ana.souza@example.com', 'Gabriela', 'BA', 'FEIRA-DE-SANTANA');

-- Inserindo dados na tabela categoria
INSERT INTO categoria (cat_tipo) VALUES 
('Comum'),
('Vegetariano'),
('Vegano'),
('Sem-Lactose');

-- Inserindo dados na tabela recheio
INSERT INTO recheio (reche_tipo, reche_preco) VALUES 
('Bacon e Queijo', 8.0),
('Frango e Queijo', 8.0),
('Queijo Vegano', 9.0),
('Queijo Comum', 7.0),
('Carne e Presunto', 6.50);

-- Inserindo dados na tabela tamanho
INSERT INTO tamanho (tam_tipo, tam_preco) VALUES 
('P', '10.00'),
('M', '15.00'),
('G', '20.00');

-- Inserindo dados na tabela produto
INSERT INTO produto (pro_nome, pro_tipo, pro_fk_recheio, pro_fk_tamanho, pro_fk_categoria)  
VALUES ('Pastel_fsa', 'C', 1, 3, 1);
INSERT INTO produto (pro_nome, pro_tipo, pro_fk_recheio, pro_fk_tamanho, pro_fk_categoria)  
VALUES ('Pastel_ssa', 'C', 2, 2, 1);
INSERT INTO produto (pro_nome, pro_tipo, pro_fk_recheio, pro_fk_tamanho, pro_fk_categoria)  
VALUES ('Pastel_rj', 'C', 3, 1, 3);
INSERT INTO produto (pro_nome, pro_tipo, pro_fk_recheio, pro_fk_tamanho, pro_fk_categoria)  
VALUES ('Pastel_mg', 'C', 5, 3, 2);
INSERT INTO produto (pro_nome, pro_tipo, pro_fk_recheio, pro_fk_tamanho, pro_fk_categoria)  
VALUES ('Pastel_rs', 'C', 4, 3, 1);
INSERT INTO produto (pro_nome, pro_tipo)
VALUES ('Refrigerante', 'B');
INSERT INTO produto (pro_nome, pro_tipo)
VALUES ('Caldo-de-Cana', 'B');

-- Inserindo dados na tabela forma_pagamento
INSERT INTO forma_pagamento (forpag_nome) VALUES 
('Dinheiro'),
('Cartão de Crédito'),
('Cartão de Débito'),
('Pix');

-- Inserindo dados na tabela vendas
INSERT INTO vendas (ven_data, ven_fk_cliente, ven_total, ven_fk_forma_pagamento) 
VALUES 
('2024-03-25', 1, 25.00, 1),
('2024-03-25', 2, 30.00, 2),
('2024-03-26', 3, 35.00, 3),
('2024-03-26', 4, 40.00, 4);

-- Inserindo dados na tabela itens_vendas
INSERT INTO itens_vendas (itenven_fk_venda, itenven_fk_produto, itenven_quatidade, itenven_unitario, itenven_valor) 
VALUES 
(1, 1, 2, 10.00, 20.00),
(1, 6, 1, 5.00, 5.00),
(2, 2, 1, 15.00, 15.00),
(2, 7, 2, 3.00, 6.00),
(3, 3, 3, 11.67, 35.00),
(4, 4, 2, 20.00, 40.00);

-- Inserindo dados na tabela recebimento
INSERT INTO recebimento (rec_fk_vendas, rec_valor, rec_fk_forma_pagamento, rec_data) 
VALUES 
(1, 25.00, 1, '2024-03-25'),
(2, 30.00, 2, '2024-03-25'),
(3, 35.00, 3, '2024-03-26'),
(4, 40.00, 4, '2024-03-26');

-- ===============ATIVIDADE===============

--  1. Liste os nomes de todos os pastéis veganos vendidos para pessoas com mais de 18 anos.

SELECT DISTINCT pro_nome as pastel_vegano
FROM produto 
INNER JOIN vendas  ON pro_id = ven_id
INNER JOIN cliente  ON ven_fk_cliente = cli_id
INNER JOIN categoria  ON pro_fk_categoria = cat_id
INNER JOIN recheio ON pro_fk_recheio = reche_id
WHERE cat_tipo = 'Vegano' 
AND DATEDIFF(CURRENT_DATE(), cli_nascimento) / 365 > 18;

-- 2. Liste os clientes com maior número de pedidos realizados em 1 ano agrupados por mês

SELECT YEAR(ven_data) AS Ano, MONTH(ven_data) AS Mes, cli_nome as nome, COUNT(ven_id) AS NumeroPedidos
FROM vendas 
INNER JOIN cliente  ON ven_fk_cliente = cli_id
GROUP BY YEAR(ven_data), MONTH(ven_data), cli_id, cli_nome
ORDER BY Ano,Mes,NumeroPedidos DESC;

-- 3. Liste todos os pastéis que possuem bacon e queijo em seu recheio.

SELECT pro_id as id, pro_nome as nome, reche_tipo as recheio
FROM produto 
INNER JOIN recheio  ON pro_fk_recheio = reche_id
WHERE reche_tipo = 'Bacon e Queijo';

-- 4. Mostre o valor de venda total de todos os pastéis cadastrados no sistema.

SELECT SUM(reche_preco) AS ValorTotalVenda
FROM recheio;

-- 5. Liste todos os pedidos onde há pelo menos um pastel e uma bebida.

SELECT DISTINCT ven_id as id, ven_data as data, cli_nome as nome
FROM vendas 
INNER JOIN cliente  ON ven_fk_cliente = cli_id
INNER JOIN itens_vendas  ON ven_id = itenven_fk_venda
INNER JOIN produto  ON itenven_fk_produto = pro_id
WHERE pro_tipo = 'C' OR pro_tipo = 'B';

-- 6. Liste quais são os pastéis mais vendidos, incluindo a quantidade de vendas em ordem crescente.

SELECT itenven_fk_produto AS id, pro_nome as nome, COUNT(*) AS QuantidadeVendas
FROM itens_vendas 
INNER JOIN produto  ON itenven_fk_produto = pro_id
GROUP BY itenven_fk_produto, pro_nome
ORDER BY QuantidadeVendas ASC;


